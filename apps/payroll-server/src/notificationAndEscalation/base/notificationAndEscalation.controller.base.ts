/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { NotificationAndEscalationService } from "../notificationAndEscalation.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { NotificationAndEscalationCreateInput } from "./NotificationAndEscalationCreateInput";
import { NotificationAndEscalation } from "./NotificationAndEscalation";
import { NotificationAndEscalationFindManyArgs } from "./NotificationAndEscalationFindManyArgs";
import { NotificationAndEscalationWhereUniqueInput } from "./NotificationAndEscalationWhereUniqueInput";
import { NotificationAndEscalationUpdateInput } from "./NotificationAndEscalationUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class NotificationAndEscalationControllerBase {
  constructor(
    protected readonly service: NotificationAndEscalationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: NotificationAndEscalation })
  @nestAccessControl.UseRoles({
    resource: "NotificationAndEscalation",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createNotificationAndEscalation(
    @common.Body() data: NotificationAndEscalationCreateInput
  ): Promise<NotificationAndEscalation> {
    return await this.service.createNotificationAndEscalation({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [NotificationAndEscalation] })
  @ApiNestedQuery(NotificationAndEscalationFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "NotificationAndEscalation",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async notificationAndEscalations(
    @common.Req() request: Request
  ): Promise<NotificationAndEscalation[]> {
    const args = plainToClass(
      NotificationAndEscalationFindManyArgs,
      request.query
    );
    return this.service.notificationAndEscalations({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: NotificationAndEscalation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "NotificationAndEscalation",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async notificationAndEscalation(
    @common.Param() params: NotificationAndEscalationWhereUniqueInput
  ): Promise<NotificationAndEscalation | null> {
    const result = await this.service.notificationAndEscalation({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: NotificationAndEscalation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "NotificationAndEscalation",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateNotificationAndEscalation(
    @common.Param() params: NotificationAndEscalationWhereUniqueInput,
    @common.Body() data: NotificationAndEscalationUpdateInput
  ): Promise<NotificationAndEscalation | null> {
    try {
      return await this.service.updateNotificationAndEscalation({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: NotificationAndEscalation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "NotificationAndEscalation",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteNotificationAndEscalation(
    @common.Param() params: NotificationAndEscalationWhereUniqueInput
  ): Promise<NotificationAndEscalation | null> {
    try {
      return await this.service.deleteNotificationAndEscalation({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
