/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  NotificationAndEscalation as PrismaNotificationAndEscalation,
} from "@prisma/client";

export class NotificationAndEscalationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.NotificationAndEscalationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.notificationAndEscalation.count(args);
  }

  async notificationAndEscalations(
    args: Prisma.NotificationAndEscalationFindManyArgs
  ): Promise<PrismaNotificationAndEscalation[]> {
    return this.prisma.notificationAndEscalation.findMany(args);
  }
  async notificationAndEscalation(
    args: Prisma.NotificationAndEscalationFindUniqueArgs
  ): Promise<PrismaNotificationAndEscalation | null> {
    return this.prisma.notificationAndEscalation.findUnique(args);
  }
  async createNotificationAndEscalation(
    args: Prisma.NotificationAndEscalationCreateArgs
  ): Promise<PrismaNotificationAndEscalation> {
    return this.prisma.notificationAndEscalation.create(args);
  }
  async updateNotificationAndEscalation(
    args: Prisma.NotificationAndEscalationUpdateArgs
  ): Promise<PrismaNotificationAndEscalation> {
    return this.prisma.notificationAndEscalation.update(args);
  }
  async deleteNotificationAndEscalation(
    args: Prisma.NotificationAndEscalationDeleteArgs
  ): Promise<PrismaNotificationAndEscalation> {
    return this.prisma.notificationAndEscalation.delete(args);
  }
}
