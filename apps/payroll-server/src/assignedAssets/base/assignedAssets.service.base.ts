/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, AssignedAssets as PrismaAssignedAssets } from "@prisma/client";

export class AssignedAssetsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AssignedAssetsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.assignedAssets.count(args);
  }

  async assignedAssetsItems(
    args: Prisma.AssignedAssetsFindManyArgs
  ): Promise<PrismaAssignedAssets[]> {
    return this.prisma.assignedAssets.findMany(args);
  }
  async assignedAssets(
    args: Prisma.AssignedAssetsFindUniqueArgs
  ): Promise<PrismaAssignedAssets | null> {
    return this.prisma.assignedAssets.findUnique(args);
  }
  async createAssignedAssets(
    args: Prisma.AssignedAssetsCreateArgs
  ): Promise<PrismaAssignedAssets> {
    return this.prisma.assignedAssets.create(args);
  }
  async updateAssignedAssets(
    args: Prisma.AssignedAssetsUpdateArgs
  ): Promise<PrismaAssignedAssets> {
    return this.prisma.assignedAssets.update(args);
  }
  async deleteAssignedAssets(
    args: Prisma.AssignedAssetsDeleteArgs
  ): Promise<PrismaAssignedAssets> {
    return this.prisma.assignedAssets.delete(args);
  }
}
