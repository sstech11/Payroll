/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ExpenseCategoriesService } from "../expenseCategories.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ExpenseCategoriesCreateInput } from "./ExpenseCategoriesCreateInput";
import { ExpenseCategories } from "./ExpenseCategories";
import { ExpenseCategoriesFindManyArgs } from "./ExpenseCategoriesFindManyArgs";
import { ExpenseCategoriesWhereUniqueInput } from "./ExpenseCategoriesWhereUniqueInput";
import { ExpenseCategoriesUpdateInput } from "./ExpenseCategoriesUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ExpenseCategoriesControllerBase {
  constructor(
    protected readonly service: ExpenseCategoriesService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ExpenseCategories })
  @nestAccessControl.UseRoles({
    resource: "ExpenseCategories",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createExpenseCategories(
    @common.Body() data: ExpenseCategoriesCreateInput
  ): Promise<ExpenseCategories> {
    return await this.service.createExpenseCategories({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [ExpenseCategories] })
  @ApiNestedQuery(ExpenseCategoriesFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ExpenseCategories",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async expenseCategoriesItems(
    @common.Req() request: Request
  ): Promise<ExpenseCategories[]> {
    const args = plainToClass(ExpenseCategoriesFindManyArgs, request.query);
    return this.service.expenseCategoriesItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ExpenseCategories })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ExpenseCategories",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async expenseCategories(
    @common.Param() params: ExpenseCategoriesWhereUniqueInput
  ): Promise<ExpenseCategories | null> {
    const result = await this.service.expenseCategories({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ExpenseCategories })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ExpenseCategories",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateExpenseCategories(
    @common.Param() params: ExpenseCategoriesWhereUniqueInput,
    @common.Body() data: ExpenseCategoriesUpdateInput
  ): Promise<ExpenseCategories | null> {
    try {
      return await this.service.updateExpenseCategories({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ExpenseCategories })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ExpenseCategories",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteExpenseCategories(
    @common.Param() params: ExpenseCategoriesWhereUniqueInput
  ): Promise<ExpenseCategories | null> {
    try {
      return await this.service.deleteExpenseCategories({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
