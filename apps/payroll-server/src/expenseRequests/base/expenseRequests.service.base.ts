/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ExpenseRequests as PrismaExpenseRequests,
} from "@prisma/client";

export class ExpenseRequestsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ExpenseRequestsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.expenseRequests.count(args);
  }

  async expenseRequestsItems(
    args: Prisma.ExpenseRequestsFindManyArgs
  ): Promise<PrismaExpenseRequests[]> {
    return this.prisma.expenseRequests.findMany(args);
  }
  async expenseRequests(
    args: Prisma.ExpenseRequestsFindUniqueArgs
  ): Promise<PrismaExpenseRequests | null> {
    return this.prisma.expenseRequests.findUnique(args);
  }
  async createExpenseRequests(
    args: Prisma.ExpenseRequestsCreateArgs
  ): Promise<PrismaExpenseRequests> {
    return this.prisma.expenseRequests.create(args);
  }
  async updateExpenseRequests(
    args: Prisma.ExpenseRequestsUpdateArgs
  ): Promise<PrismaExpenseRequests> {
    return this.prisma.expenseRequests.update(args);
  }
  async deleteExpenseRequests(
    args: Prisma.ExpenseRequestsDeleteArgs
  ): Promise<PrismaExpenseRequests> {
    return this.prisma.expenseRequests.delete(args);
  }
}
