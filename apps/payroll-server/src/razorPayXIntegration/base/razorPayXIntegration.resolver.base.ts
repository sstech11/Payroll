/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { RazorPayXIntegration } from "./RazorPayXIntegration";
import { RazorPayXIntegrationCountArgs } from "./RazorPayXIntegrationCountArgs";
import { RazorPayXIntegrationFindManyArgs } from "./RazorPayXIntegrationFindManyArgs";
import { RazorPayXIntegrationFindUniqueArgs } from "./RazorPayXIntegrationFindUniqueArgs";
import { DeleteRazorPayXIntegrationArgs } from "./DeleteRazorPayXIntegrationArgs";
import { RazorPayXIntegrationService } from "../razorPayXIntegration.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => RazorPayXIntegration)
export class RazorPayXIntegrationResolverBase {
  constructor(
    protected readonly service: RazorPayXIntegrationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "RazorPayXIntegration",
    action: "read",
    possession: "any",
  })
  async _razorPayXIntegrationsMeta(
    @graphql.Args() args: RazorPayXIntegrationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [RazorPayXIntegration])
  @nestAccessControl.UseRoles({
    resource: "RazorPayXIntegration",
    action: "read",
    possession: "any",
  })
  async razorPayXIntegrations(
    @graphql.Args() args: RazorPayXIntegrationFindManyArgs
  ): Promise<RazorPayXIntegration[]> {
    return this.service.razorPayXIntegrations(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => RazorPayXIntegration, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "RazorPayXIntegration",
    action: "read",
    possession: "own",
  })
  async razorPayXIntegration(
    @graphql.Args() args: RazorPayXIntegrationFindUniqueArgs
  ): Promise<RazorPayXIntegration | null> {
    const result = await this.service.razorPayXIntegration(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => RazorPayXIntegration)
  @nestAccessControl.UseRoles({
    resource: "RazorPayXIntegration",
    action: "delete",
    possession: "any",
  })
  async deleteRazorPayXIntegration(
    @graphql.Args() args: DeleteRazorPayXIntegrationArgs
  ): Promise<RazorPayXIntegration | null> {
    try {
      return await this.service.deleteRazorPayXIntegration(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
