/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ApprovalLevelsAndRulesService } from "../approvalLevelsAndRules.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ApprovalLevelsAndRulesCreateInput } from "./ApprovalLevelsAndRulesCreateInput";
import { ApprovalLevelsAndRules } from "./ApprovalLevelsAndRules";
import { ApprovalLevelsAndRulesFindManyArgs } from "./ApprovalLevelsAndRulesFindManyArgs";
import { ApprovalLevelsAndRulesWhereUniqueInput } from "./ApprovalLevelsAndRulesWhereUniqueInput";
import { ApprovalLevelsAndRulesUpdateInput } from "./ApprovalLevelsAndRulesUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ApprovalLevelsAndRulesControllerBase {
  constructor(
    protected readonly service: ApprovalLevelsAndRulesService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ApprovalLevelsAndRules })
  @nestAccessControl.UseRoles({
    resource: "ApprovalLevelsAndRules",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createApprovalLevelsAndRules(
    @common.Body() data: ApprovalLevelsAndRulesCreateInput
  ): Promise<ApprovalLevelsAndRules> {
    return await this.service.createApprovalLevelsAndRules({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [ApprovalLevelsAndRules] })
  @ApiNestedQuery(ApprovalLevelsAndRulesFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ApprovalLevelsAndRules",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async approvalLevelsAndRulesItems(
    @common.Req() request: Request
  ): Promise<ApprovalLevelsAndRules[]> {
    const args = plainToClass(
      ApprovalLevelsAndRulesFindManyArgs,
      request.query
    );
    return this.service.approvalLevelsAndRulesItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ApprovalLevelsAndRules })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ApprovalLevelsAndRules",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async approvalLevelsAndRules(
    @common.Param() params: ApprovalLevelsAndRulesWhereUniqueInput
  ): Promise<ApprovalLevelsAndRules | null> {
    const result = await this.service.approvalLevelsAndRules({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ApprovalLevelsAndRules })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ApprovalLevelsAndRules",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateApprovalLevelsAndRules(
    @common.Param() params: ApprovalLevelsAndRulesWhereUniqueInput,
    @common.Body() data: ApprovalLevelsAndRulesUpdateInput
  ): Promise<ApprovalLevelsAndRules | null> {
    try {
      return await this.service.updateApprovalLevelsAndRules({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ApprovalLevelsAndRules })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ApprovalLevelsAndRules",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteApprovalLevelsAndRules(
    @common.Param() params: ApprovalLevelsAndRulesWhereUniqueInput
  ): Promise<ApprovalLevelsAndRules | null> {
    try {
      return await this.service.deleteApprovalLevelsAndRules({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
