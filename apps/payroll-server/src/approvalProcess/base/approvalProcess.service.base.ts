/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ApprovalProcess as PrismaApprovalProcess,
} from "@prisma/client";

export class ApprovalProcessServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ApprovalProcessCountArgs, "select">
  ): Promise<number> {
    return this.prisma.approvalProcess.count(args);
  }

  async approvalProcesses(
    args: Prisma.ApprovalProcessFindManyArgs
  ): Promise<PrismaApprovalProcess[]> {
    return this.prisma.approvalProcess.findMany(args);
  }
  async approvalProcess(
    args: Prisma.ApprovalProcessFindUniqueArgs
  ): Promise<PrismaApprovalProcess | null> {
    return this.prisma.approvalProcess.findUnique(args);
  }
  async createApprovalProcess(
    args: Prisma.ApprovalProcessCreateArgs
  ): Promise<PrismaApprovalProcess> {
    return this.prisma.approvalProcess.create(args);
  }
  async updateApprovalProcess(
    args: Prisma.ApprovalProcessUpdateArgs
  ): Promise<PrismaApprovalProcess> {
    return this.prisma.approvalProcess.update(args);
  }
  async deleteApprovalProcess(
    args: Prisma.ApprovalProcessDeleteArgs
  ): Promise<PrismaApprovalProcess> {
    return this.prisma.approvalProcess.delete(args);
  }
}
