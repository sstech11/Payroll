/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  AdvanceTracking as PrismaAdvanceTracking,
} from "@prisma/client";

export class AdvanceTrackingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AdvanceTrackingCountArgs, "select">
  ): Promise<number> {
    return this.prisma.advanceTracking.count(args);
  }

  async advanceTrackings(
    args: Prisma.AdvanceTrackingFindManyArgs
  ): Promise<PrismaAdvanceTracking[]> {
    return this.prisma.advanceTracking.findMany(args);
  }
  async advanceTracking(
    args: Prisma.AdvanceTrackingFindUniqueArgs
  ): Promise<PrismaAdvanceTracking | null> {
    return this.prisma.advanceTracking.findUnique(args);
  }
  async createAdvanceTracking(
    args: Prisma.AdvanceTrackingCreateArgs
  ): Promise<PrismaAdvanceTracking> {
    return this.prisma.advanceTracking.create(args);
  }
  async updateAdvanceTracking(
    args: Prisma.AdvanceTrackingUpdateArgs
  ): Promise<PrismaAdvanceTracking> {
    return this.prisma.advanceTracking.update(args);
  }
  async deleteAdvanceTracking(
    args: Prisma.AdvanceTrackingDeleteArgs
  ): Promise<PrismaAdvanceTracking> {
    return this.prisma.advanceTracking.delete(args);
  }
}
