/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  EmployeeInformationManagement as PrismaEmployeeInformationManagement,
} from "@prisma/client";

export class EmployeeInformationManagementServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.EmployeeInformationManagementCountArgs, "select">
  ): Promise<number> {
    return this.prisma.employeeInformationManagement.count(args);
  }

  async employeeInformationManagements(
    args: Prisma.EmployeeInformationManagementFindManyArgs
  ): Promise<PrismaEmployeeInformationManagement[]> {
    return this.prisma.employeeInformationManagement.findMany(args);
  }
  async employeeInformationManagement(
    args: Prisma.EmployeeInformationManagementFindUniqueArgs
  ): Promise<PrismaEmployeeInformationManagement | null> {
    return this.prisma.employeeInformationManagement.findUnique(args);
  }
  async createEmployeeInformationManagement(
    args: Prisma.EmployeeInformationManagementCreateArgs
  ): Promise<PrismaEmployeeInformationManagement> {
    return this.prisma.employeeInformationManagement.create(args);
  }
  async updateEmployeeInformationManagement(
    args: Prisma.EmployeeInformationManagementUpdateArgs
  ): Promise<PrismaEmployeeInformationManagement> {
    return this.prisma.employeeInformationManagement.update(args);
  }
  async deleteEmployeeInformationManagement(
    args: Prisma.EmployeeInformationManagementDeleteArgs
  ): Promise<PrismaEmployeeInformationManagement> {
    return this.prisma.employeeInformationManagement.delete(args);
  }
}
