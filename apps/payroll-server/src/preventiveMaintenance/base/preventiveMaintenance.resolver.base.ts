/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { PreventiveMaintenance } from "./PreventiveMaintenance";
import { PreventiveMaintenanceCountArgs } from "./PreventiveMaintenanceCountArgs";
import { PreventiveMaintenanceFindManyArgs } from "./PreventiveMaintenanceFindManyArgs";
import { PreventiveMaintenanceFindUniqueArgs } from "./PreventiveMaintenanceFindUniqueArgs";
import { DeletePreventiveMaintenanceArgs } from "./DeletePreventiveMaintenanceArgs";
import { PreventiveMaintenanceService } from "../preventiveMaintenance.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PreventiveMaintenance)
export class PreventiveMaintenanceResolverBase {
  constructor(
    protected readonly service: PreventiveMaintenanceService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PreventiveMaintenance",
    action: "read",
    possession: "any",
  })
  async _preventiveMaintenancesMeta(
    @graphql.Args() args: PreventiveMaintenanceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PreventiveMaintenance])
  @nestAccessControl.UseRoles({
    resource: "PreventiveMaintenance",
    action: "read",
    possession: "any",
  })
  async preventiveMaintenances(
    @graphql.Args() args: PreventiveMaintenanceFindManyArgs
  ): Promise<PreventiveMaintenance[]> {
    return this.service.preventiveMaintenances(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PreventiveMaintenance, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PreventiveMaintenance",
    action: "read",
    possession: "own",
  })
  async preventiveMaintenance(
    @graphql.Args() args: PreventiveMaintenanceFindUniqueArgs
  ): Promise<PreventiveMaintenance | null> {
    const result = await this.service.preventiveMaintenance(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PreventiveMaintenance)
  @nestAccessControl.UseRoles({
    resource: "PreventiveMaintenance",
    action: "delete",
    possession: "any",
  })
  async deletePreventiveMaintenance(
    @graphql.Args() args: DeletePreventiveMaintenanceArgs
  ): Promise<PreventiveMaintenance | null> {
    try {
      return await this.service.deletePreventiveMaintenance(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
